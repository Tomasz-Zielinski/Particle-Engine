"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var VertexShader = "\n\n    uniform float uTime;\n    uniform float uScale;\n\n    attribute vec3 positionStart;\n    attribute float startTime;\n    attribute vec3 velocity;\n    attribute vec3 color;\n    attribute float size;\n    attribute float life;\n\n    varying vec4 vColor;\n    varying float lifeLeft;\n        \n    void main() {\n\n    \tvColor = vec4( color, 1.0 );\n\n    \tvec3 newPosition;\n    \tvec3 v;\n\n    \tfloat timeElapsed = uTime - startTime;\n\n    \tlifeLeft = 1.0 - ( timeElapsed / life );\n\n    \tgl_PointSize = ( uScale * size ) * lifeLeft ;\n\n    \tv.x = ( velocity.x - 0.5 ) * 5.0;\n    \tv.y = ( velocity.y - 0.5 ) * 5.0;\n    \tv.z = ( velocity.z - 0.5 ) * 5.0;\n\n    \tnewPosition = positionStart + ( v * 1.0 ) * timeElapsed;\n\n    \tnewPosition = mix( newPosition, newPosition + vec3( 0.1, 0.1, 0.1), ( timeElapsed / life ) );\n\n    \tif( v.y > 0. && v.y < .05 ) lifeLeft = 0.0;\n\n    \tif( v.x < - 1.45 ) lifeLeft = 0.0;\n\n    \tif( timeElapsed > 0.0 ) {\n\n    \t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n\n    \t} else {\n\n    \t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 0.0 );\n    \t\tlifeLeft = 0.0;\n    \t\tgl_PointSize = 0.0;\n\n    \t}\n\n    }\n\n";
exports.VertexShader = VertexShader;
