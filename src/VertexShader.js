"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var VertexShader = "\n\n    uniform float uTime;\n    uniform float uScale;\n    uniform sampler2D tNoise;\n\n    attribute vec3 positionStart;\n    attribute float startTime;\n    attribute vec3 velocity;\n    attribute vec3 color;\n    attribute float size;\n    attribute float lifeTime;\n\n    varying vec4 vColor;\n    varying float lifeLeft;\n\n    float rand(vec2 co){\n    \treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n    }\n        \n    void main() {\n\n    \tvColor = vec4( color, 1.0 );\n\n    \tvec3 newPosition;\n    \tvec3 v;\n\n    \tfloat timeElapsed = uTime - startTime;\n\n    \tlifeLeft = 1.0 - ( timeElapsed / lifeTime );\n\n    \tgl_PointSize = ( uScale * size ) * lifeLeft;\n\n    \tv.x = ( velocity.x - 0.5 ) * 3.0;\n    \tv.y = ( velocity.y - 0.5 ) * 3.0;\n    \tv.z = ( velocity.z - 0.5 ) * 3.0;\n\n    \tnewPosition = positionStart + ( v * 10.0 ) * timeElapsed;\n\n    \tvec3 noise = texture2D( tNoise, vec2( newPosition.x * 0.015 + ( uTime * 0.05 ), newPosition.y * 0.02 + ( uTime * 0.015 ) ) ).rgb;\n    \tvec3 noiseVel = ( noise.rgb - 0.5 ) * 30.0;\n\n    \tnewPosition = mix( newPosition, newPosition + vec3( noiseVel ), ( timeElapsed / lifeTime ) );\n\n    \tif( v.y > 0. && v.y < .05 ) lifeLeft = 0.0;\n\n    \tif( v.x < - 1.45 ) lifeLeft = 0.0;\n\n    \tif( timeElapsed > 0.0 ) {\n\n    \t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n\n    \t} else {\n\n    \t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    \t\tlifeLeft = 0.0;\n    \t\tgl_PointSize = 0.;\n\n    \t}\n\n    }\n\n";
exports.VertexShader = VertexShader;
