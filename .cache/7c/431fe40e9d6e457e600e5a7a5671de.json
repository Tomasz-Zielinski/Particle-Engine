{"id":"dist/ParticleEngine.js","dependencies":[{"name":"C:\\Users\\Asaris\\Desktop\\Asaris\\Programming\\ParticleEngine\\dist\\ParticleEngine.map","includedInParent":true,"mtime":1549650648725},{"name":"C:\\Users\\Asaris\\Desktop\\Asaris\\Programming\\ParticleEngine\\package.json","includedInParent":true,"mtime":1549650564294}],"generated":{"js":"var define;\nvar global = arguments[3];\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n// eslint-disable-next-line no-global-assign\nparcelRequire = function (modules, cache, entry, globalName) {\n  // Save the require from previous bundle to this closure if any\n  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;\n  var nodeRequire = typeof require === 'function' && require;\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;\n\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        } // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n\n\n        if (previousRequire) {\n          return previousRequire(name, true);\n        } // Try the node require function if it exists.\n\n\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error('Cannot find module \\'' + name + '\\'');\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n      var module = cache[name] = new newRequire.Module(name);\n      modules[name][0].call(module.exports, localRequire, module, module.exports, this);\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      return newRequire(localRequire.resolve(x));\n    }\n\n    function resolve(x) {\n      return modules[name][1][x] || x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n\n  newRequire.register = function (id, exports) {\n    modules[id] = [function (require, module) {\n      module.exports = exports;\n    }, {}];\n  };\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (entry.length) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(entry[entry.length - 1]); // CommonJS\n\n    if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === \"object\" && typeof module !== \"undefined\") {\n      module.exports = mainExports; // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n      define(function () {\n        return mainExports;\n      }); // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  } // Override the current require with this new one\n\n\n  return newRequire;\n}({\n  \"VertexShader.js\": [function (require, module, exports) {\n    \"use strict\";\n\n    exports.__esModule = true;\n    var VertexShader = \"\\n\\n  uniform float uTime;,\\n  uniform float uScale;,\\n  uniform sampler2D tNoise;,\\n\\n  attribute vec3 positionStart;,\\n  attribute float startTime;,\\n  attribute vec3 velocity;,\\n  attribute float turbulence;,\\n  attribute vec3 color;,\\n  attribute float size;,\\n  attribute float lifeTime;,\\n\\n  varying vec4 vColor;,\\n  varying float lifeLeft;,\\n\\n  void main() {,\\n\\n  // unpack things from our attributes\\n\\n  \\tvColor = vec4( color, 1.0 );,\\n\\n  // convert our velocity back into a value we can use\\n\\n  \\tvec3 newPosition;,\\n  \\tvec3 v;,\\n\\n  \\tfloat timeElapsed = uTime - startTime;,\\n\\n  \\tlifeLeft = 1.0 - ( timeElapsed / lifeTime );,\\n\\n  \\tgl_PointSize = ( uScale * size ) * lifeLeft;,\\n\\n  \\tv.x = ( velocity.x - 0.5 ) * 3.0;,\\n  \\tv.y = ( velocity.y - 0.5 ) * 3.0;,\\n  \\tv.z = ( velocity.z - 0.5 ) * 3.0;,\\n\\n  \\tnewPosition = positionStart + ( v * 10.0 ) * timeElapsed;,\\n\\n  \\tvec3 noise = texture2D( tNoise, vec2( newPosition.x * 0.015 + ( uTime * 0.05 ), newPosition.y * 0.02 + ( uTime * 0.015 ) ) ).rgb;,\\n  \\tvec3 noiseVel = ( noise.rgb - 0.5 ) * 30.0;,\\n\\n  \\tnewPosition = mix( newPosition, newPosition + vec3( noiseVel * ( turbulence * 5.0 ) ), ( timeElapsed / lifeTime ) );,\\n\\n  \\tif( v.y > 0. && v.y < .05 ) {,\\n\\n  \\t\\tlifeLeft = 0.0;,\\n\\n  \\t},\\n\\n  \\tif( v.x < - 1.45 ) {,\\n\\n  \\t\\tlifeLeft = 0.0;,\\n\\n  \\t},\\n\\n  \\tif( timeElapsed > 0.0 ) {,\\n\\n  \\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );,\\n\\n  \\t} else {,\\n\\n  \\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );,\\n  \\t\\tlifeLeft = 0.0;,\\n  \\t\\tgl_PointSize = 0.;,\\n\\n  \\t},\\n\\n  }\\n\\n\";\n    exports.VertexShader = VertexShader;\n  }, {}],\n  \"ParticleEngine.js\": [function (require, module, exports) {\n    \"use strict\";\n\n    exports.__esModule = true;\n\n    var VertexShader_1 = require(\"./VertexShader\");\n\n    console.log(VertexShader_1.VertexShader);\n    console.log(\"XD\");\n  }, {\n    \"./VertexShader\": \"VertexShader.js\"\n  }],\n  \"../../../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js\": [function (require, module, exports) {\n    var global = arguments[3];\n    var OVERLAY_ID = '__parcel__error__overlay__';\n    var OldModule = module.bundle.Module;\n\n    function Module(moduleName) {\n      OldModule.call(this, moduleName);\n      this.hot = {\n        data: module.bundle.hotData,\n        _acceptCallbacks: [],\n        _disposeCallbacks: [],\n        accept: function accept(fn) {\n          this._acceptCallbacks.push(fn || function () {});\n        },\n        dispose: function dispose(fn) {\n          this._disposeCallbacks.push(fn);\n        }\n      };\n      module.bundle.hotData = null;\n    }\n\n    module.bundle.Module = Module;\n    var parent = module.bundle.parent;\n\n    if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n      var hostname = \"\" || location.hostname;\n      var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n      var ws = new WebSocket(protocol + '://' + hostname + ':' + \"49859\" + '/');\n\n      ws.onmessage = function (event) {\n        var data = JSON.parse(event.data);\n\n        if (data.type === 'update') {\n          console.clear();\n          data.assets.forEach(function (asset) {\n            hmrApply(global.parcelRequire, asset);\n          });\n          data.assets.forEach(function (asset) {\n            if (!asset.isNew) {\n              hmrAccept(global.parcelRequire, asset.id);\n            }\n          });\n        }\n\n        if (data.type === 'reload') {\n          ws.close();\n\n          ws.onclose = function () {\n            location.reload();\n          };\n        }\n\n        if (data.type === 'error-resolved') {\n          console.log('[parcel] âœ¨ Error resolved');\n          removeErrorOverlay();\n        }\n\n        if (data.type === 'error') {\n          console.error('[parcel] ðŸš¨  ' + data.error.message + '\\n' + data.error.stack);\n          removeErrorOverlay();\n          var overlay = createErrorOverlay(data);\n          document.body.appendChild(overlay);\n        }\n      };\n    }\n\n    function removeErrorOverlay() {\n      var overlay = document.getElementById(OVERLAY_ID);\n\n      if (overlay) {\n        overlay.remove();\n      }\n    }\n\n    function createErrorOverlay(data) {\n      var overlay = document.createElement('div');\n      overlay.id = OVERLAY_ID; // html encode message and stack trace\n\n      var message = document.createElement('div');\n      var stackTrace = document.createElement('pre');\n      message.innerText = data.error.message;\n      stackTrace.innerText = data.error.stack;\n      overlay.innerHTML = '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' + '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' + '<span style=\"top: 2px; margin-left: 5px; position: relative;\">ðŸš¨</span>' + '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';\n      return overlay;\n    }\n\n    function getParents(bundle, id) {\n      var modules = bundle.modules;\n\n      if (!modules) {\n        return [];\n      }\n\n      var parents = [];\n      var k, d, dep;\n\n      for (k in modules) {\n        for (d in modules[k][1]) {\n          dep = modules[k][1][d];\n\n          if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n            parents.push(k);\n          }\n        }\n      }\n\n      if (bundle.parent) {\n        parents = parents.concat(getParents(bundle.parent, id));\n      }\n\n      return parents;\n    }\n\n    function hmrApply(bundle, asset) {\n      var modules = bundle.modules;\n\n      if (!modules) {\n        return;\n      }\n\n      if (modules[asset.id] || !bundle.parent) {\n        var fn = new Function('require', 'module', 'exports', asset.generated.js);\n        asset.isNew = !modules[asset.id];\n        modules[asset.id] = [fn, asset.deps];\n      } else if (bundle.parent) {\n        hmrApply(bundle.parent, asset);\n      }\n    }\n\n    function hmrAccept(bundle, id) {\n      var modules = bundle.modules;\n\n      if (!modules) {\n        return;\n      }\n\n      if (!modules[id] && bundle.parent) {\n        return hmrAccept(bundle.parent, id);\n      }\n\n      var cached = bundle.cache[id];\n      bundle.hotData = {};\n\n      if (cached) {\n        cached.hot.data = bundle.hotData;\n      }\n\n      if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n        cached.hot._disposeCallbacks.forEach(function (cb) {\n          cb(bundle.hotData);\n        });\n      }\n\n      delete bundle.cache[id];\n      bundle(id);\n      cached = bundle.cache[id];\n\n      if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n        cached.hot._acceptCallbacks.forEach(function (cb) {\n          cb();\n        });\n\n        return true;\n      }\n\n      return getParents(global.parcelRequire, id).some(function (id) {\n        return hmrAccept(global.parcelRequire, id);\n      });\n    }\n  }, {}]\n}, {}, [\"../../../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js\", \"ParticleEngine.js\"], null);","map":{"mappings":[{"source":"../VertexShader.js","name":null,"original":{"line":1,"column":0},"generated":{"line":107,"column":0}},{"source":"../VertexShader.js","name":"exports","original":{"line":2,"column":0},"generated":{"line":109,"column":0}},{"source":"../VertexShader.js","name":"exports","original":{"line":2,"column":0},"generated":{"line":109,"column":4}},{"source":"../VertexShader.js","name":null,"original":{"line":2,"column":7},"generated":{"line":109,"column":11}},{"source":"../VertexShader.js","name":"__esModule","original":{"line":2,"column":8},"generated":{"line":109,"column":12}},{"source":"../VertexShader.js","name":"exports","original":{"line":2,"column":0},"generated":{"line":109,"column":22}},{"source":"../VertexShader.js","name":null,"original":{"line":2,"column":21},"generated":{"line":109,"column":25}},{"source":"../VertexShader.js","name":"exports","original":{"line":2,"column":0},"generated":{"line":109,"column":29}},{"source":"../VertexShader.js","name":null,"original":{"line":3,"column":0},"generated":{"line":110,"column":0}},{"source":"../VertexShader.js","name":"VertexShader","original":{"line":3,"column":4},"generated":{"line":110,"column":8}},{"source":"../VertexShader.js","name":null,"original":{"line":3,"column":16},"generated":{"line":110,"column":20}},{"source":"../VertexShader.js","name":null,"original":{"line":3,"column":19},"generated":{"line":110,"column":23}},{"source":"../VertexShader.js","name":null,"original":{"line":3,"column":0},"generated":{"line":110,"column":1657}},{"source":"../VertexShader.js","name":"exports","original":{"line":4,"column":0},"generated":{"line":111,"column":0}},{"source":"../VertexShader.js","name":"exports","original":{"line":4,"column":0},"generated":{"line":111,"column":4}},{"source":"../VertexShader.js","name":null,"original":{"line":4,"column":7},"generated":{"line":111,"column":11}},{"source":"../VertexShader.js","name":"VertexShader","original":{"line":4,"column":8},"generated":{"line":111,"column":12}},{"source":"../VertexShader.js","name":"exports","original":{"line":4,"column":0},"generated":{"line":111,"column":24}},{"source":"../VertexShader.js","name":"VertexShader","original":{"line":4,"column":23},"generated":{"line":111,"column":27}},{"source":"../VertexShader.js","name":"exports","original":{"line":4,"column":0},"generated":{"line":111,"column":39}},{"source":"../ParticleEngine.js","name":null,"original":{"line":1,"column":0},"generated":{"line":114,"column":0}},{"source":"../ParticleEngine.js","name":"exports","original":{"line":2,"column":0},"generated":{"line":116,"column":0}},{"source":"../ParticleEngine.js","name":"exports","original":{"line":2,"column":0},"generated":{"line":116,"column":4}},{"source":"../ParticleEngine.js","name":null,"original":{"line":2,"column":7},"generated":{"line":116,"column":11}},{"source":"../ParticleEngine.js","name":"__esModule","original":{"line":2,"column":8},"generated":{"line":116,"column":12}},{"source":"../ParticleEngine.js","name":"exports","original":{"line":2,"column":0},"generated":{"line":116,"column":22}},{"source":"../ParticleEngine.js","name":null,"original":{"line":2,"column":21},"generated":{"line":116,"column":25}},{"source":"../ParticleEngine.js","name":"exports","original":{"line":2,"column":0},"generated":{"line":116,"column":29}},{"source":"../ParticleEngine.js","name":null,"original":{"line":3,"column":0},"generated":{"line":118,"column":0}},{"source":"../ParticleEngine.js","name":"VertexShader_1","original":{"line":3,"column":4},"generated":{"line":118,"column":8}},{"source":"../ParticleEngine.js","name":null,"original":{"line":3,"column":18},"generated":{"line":118,"column":22}},{"source":"../ParticleEngine.js","name":"require","original":{"line":3,"column":21},"generated":{"line":118,"column":25}},{"source":"../ParticleEngine.js","name":null,"original":{"line":3,"column":28},"generated":{"line":118,"column":32}},{"source":"../ParticleEngine.js","name":null,"original":{"line":3,"column":29},"generated":{"line":118,"column":33}},{"source":"../ParticleEngine.js","name":null,"original":{"line":3,"column":28},"generated":{"line":118,"column":49}},{"source":"../ParticleEngine.js","name":null,"original":{"line":3,"column":0},"generated":{"line":118,"column":50}},{"source":"../ParticleEngine.js","name":"console","original":{"line":4,"column":0},"generated":{"line":120,"column":0}},{"source":"../ParticleEngine.js","name":"console","original":{"line":4,"column":0},"generated":{"line":120,"column":4}},{"source":"../ParticleEngine.js","name":null,"original":{"line":4,"column":7},"generated":{"line":120,"column":11}},{"source":"../ParticleEngine.js","name":"log","original":{"line":4,"column":8},"generated":{"line":120,"column":12}},{"source":"../ParticleEngine.js","name":"console","original":{"line":4,"column":0},"generated":{"line":120,"column":15}},{"source":"../ParticleEngine.js","name":"VertexShader_1","original":{"line":4,"column":12},"generated":{"line":120,"column":16}},{"source":"../ParticleEngine.js","name":null,"original":{"line":4,"column":26},"generated":{"line":120,"column":30}},{"source":"../ParticleEngine.js","name":"VertexShader","original":{"line":4,"column":27},"generated":{"line":120,"column":31}},{"source":"../ParticleEngine.js","name":"console","original":{"line":4,"column":0},"generated":{"line":120,"column":43}},{"source":"../ParticleEngine.js","name":"console","original":{"line":5,"column":0},"generated":{"line":121,"column":0}},{"source":"../ParticleEngine.js","name":"console","original":{"line":5,"column":0},"generated":{"line":121,"column":4}},{"source":"../ParticleEngine.js","name":null,"original":{"line":5,"column":7},"generated":{"line":121,"column":11}},{"source":"../ParticleEngine.js","name":"log","original":{"line":5,"column":8},"generated":{"line":121,"column":12}},{"source":"../ParticleEngine.js","name":"console","original":{"line":5,"column":0},"generated":{"line":121,"column":15}},{"source":"../ParticleEngine.js","name":null,"original":{"line":5,"column":12},"generated":{"line":121,"column":16}},{"source":"../ParticleEngine.js","name":"console","original":{"line":5,"column":0},"generated":{"line":121,"column":20}}],"sources":{"../VertexShader.js":"\"use strict\";\r\nexports.__esModule = true;\r\nvar VertexShader = \"\\n\\n  uniform float uTime;,\\n  uniform float uScale;,\\n  uniform sampler2D tNoise;,\\n\\n  attribute vec3 positionStart;,\\n  attribute float startTime;,\\n  attribute vec3 velocity;,\\n  attribute float turbulence;,\\n  attribute vec3 color;,\\n  attribute float size;,\\n  attribute float lifeTime;,\\n\\n  varying vec4 vColor;,\\n  varying float lifeLeft;,\\n\\n  void main() {,\\n\\n  // unpack things from our attributes\\n\\n  \\tvColor = vec4( color, 1.0 );,\\n\\n  // convert our velocity back into a value we can use\\n\\n  \\tvec3 newPosition;,\\n  \\tvec3 v;,\\n\\n  \\tfloat timeElapsed = uTime - startTime;,\\n\\n  \\tlifeLeft = 1.0 - ( timeElapsed / lifeTime );,\\n\\n  \\tgl_PointSize = ( uScale * size ) * lifeLeft;,\\n\\n  \\tv.x = ( velocity.x - 0.5 ) * 3.0;,\\n  \\tv.y = ( velocity.y - 0.5 ) * 3.0;,\\n  \\tv.z = ( velocity.z - 0.5 ) * 3.0;,\\n\\n  \\tnewPosition = positionStart + ( v * 10.0 ) * timeElapsed;,\\n\\n  \\tvec3 noise = texture2D( tNoise, vec2( newPosition.x * 0.015 + ( uTime * 0.05 ), newPosition.y * 0.02 + ( uTime * 0.015 ) ) ).rgb;,\\n  \\tvec3 noiseVel = ( noise.rgb - 0.5 ) * 30.0;,\\n\\n  \\tnewPosition = mix( newPosition, newPosition + vec3( noiseVel * ( turbulence * 5.0 ) ), ( timeElapsed / lifeTime ) );,\\n\\n  \\tif( v.y > 0. && v.y < .05 ) {,\\n\\n  \\t\\tlifeLeft = 0.0;,\\n\\n  \\t},\\n\\n  \\tif( v.x < - 1.45 ) {,\\n\\n  \\t\\tlifeLeft = 0.0;,\\n\\n  \\t},\\n\\n  \\tif( timeElapsed > 0.0 ) {,\\n\\n  \\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );,\\n\\n  \\t} else {,\\n\\n  \\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );,\\n  \\t\\tlifeLeft = 0.0;,\\n  \\t\\tgl_PointSize = 0.;,\\n\\n  \\t},\\n\\n  }\\n\\n\";\r\nexports.VertexShader = VertexShader;\r\n","../ParticleEngine.js":"\"use strict\";\r\nexports.__esModule = true;\r\nvar VertexShader_1 = require(\"./VertexShader\");\r\nconsole.log(VertexShader_1.VertexShader);\r\nconsole.log(\"XD\");\r\n"},"lineCount":null}},"hash":"4e86e8aa666ab920c6d399f16f28da37","cacheData":{"env":{}}}