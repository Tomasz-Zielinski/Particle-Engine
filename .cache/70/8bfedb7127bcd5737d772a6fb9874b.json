{"id":"VertexShader.js","dependencies":[{"name":"C:\\Users\\Asaris\\Desktop\\Asaris\\Programming\\ParticleEngine\\package.json","includedInParent":true,"mtime":1549650564294}],"generated":{"js":"\"use strict\";\n\nexports.__esModule = true;\nvar VertexShader = \"\\n\\n  uniform float uTime;,\\n  uniform float uScale;,\\n  uniform sampler2D tNoise;,\\n\\n  attribute vec3 positionStart;,\\n  attribute float startTime;,\\n  attribute vec3 velocity;,\\n  attribute float turbulence;,\\n  attribute vec3 color;,\\n  attribute float size;,\\n  attribute float lifeTime;,\\n\\n  varying vec4 vColor;,\\n  varying float lifeLeft;,\\n\\n  void main() {,\\n\\n  // unpack things from our attributes\\n\\n  \\tvColor = vec4( color, 1.0 );,\\n\\n  // convert our velocity back into a value we can use\\n\\n  \\tvec3 newPosition;,\\n  \\tvec3 v;,\\n\\n  \\tfloat timeElapsed = uTime - startTime;,\\n\\n  \\tlifeLeft = 1.0 - ( timeElapsed / lifeTime );,\\n\\n  \\tgl_PointSize = ( uScale * size ) * lifeLeft;,\\n\\n  \\tv.x = ( velocity.x - 0.5 ) * 3.0;,\\n  \\tv.y = ( velocity.y - 0.5 ) * 3.0;,\\n  \\tv.z = ( velocity.z - 0.5 ) * 3.0;,\\n\\n  \\tnewPosition = positionStart + ( v * 10.0 ) * timeElapsed;,\\n\\n  \\tvec3 noise = texture2D( tNoise, vec2( newPosition.x * 0.015 + ( uTime * 0.05 ), newPosition.y * 0.02 + ( uTime * 0.015 ) ) ).rgb;,\\n  \\tvec3 noiseVel = ( noise.rgb - 0.5 ) * 30.0;,\\n\\n  \\tnewPosition = mix( newPosition, newPosition + vec3( noiseVel * ( turbulence * 5.0 ) ), ( timeElapsed / lifeTime ) );,\\n\\n  \\tif( v.y > 0. && v.y < .05 ) {,\\n\\n  \\t\\tlifeLeft = 0.0;,\\n\\n  \\t},\\n\\n  \\tif( v.x < - 1.45 ) {,\\n\\n  \\t\\tlifeLeft = 0.0;,\\n\\n  \\t},\\n\\n  \\tif( timeElapsed > 0.0 ) {,\\n\\n  \\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );,\\n\\n  \\t} else {,\\n\\n  \\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );,\\n  \\t\\tlifeLeft = 0.0;,\\n  \\t\\tgl_PointSize = 0.;,\\n\\n  \\t},\\n\\n  }\\n\\n\";\nexports.VertexShader = VertexShader;","map":{"mappings":[{"generated":{"line":1,"column":0},"source":"VertexShader.js","original":{"line":1,"column":0}},{"name":"exports","generated":{"line":3,"column":0},"source":"VertexShader.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":7},"source":"VertexShader.js","original":{"line":2,"column":7}},{"name":"__esModule","generated":{"line":3,"column":8},"source":"VertexShader.js","original":{"line":2,"column":8}},{"generated":{"line":3,"column":18},"source":"VertexShader.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":21},"source":"VertexShader.js","original":{"line":2,"column":21}},{"generated":{"line":3,"column":25},"source":"VertexShader.js","original":{"line":2,"column":0}},{"generated":{"line":4,"column":0},"source":"VertexShader.js","original":{"line":3,"column":0}},{"name":"VertexShader","generated":{"line":4,"column":4},"source":"VertexShader.js","original":{"line":3,"column":4}},{"generated":{"line":4,"column":16},"source":"VertexShader.js","original":{"line":3,"column":16}},{"generated":{"line":4,"column":19},"source":"VertexShader.js","original":{"line":3,"column":19}},{"generated":{"line":4,"column":1653},"source":"VertexShader.js","original":{"line":3,"column":0}},{"name":"exports","generated":{"line":5,"column":0},"source":"VertexShader.js","original":{"line":4,"column":0}},{"generated":{"line":5,"column":7},"source":"VertexShader.js","original":{"line":4,"column":7}},{"name":"VertexShader","generated":{"line":5,"column":8},"source":"VertexShader.js","original":{"line":4,"column":8}},{"generated":{"line":5,"column":20},"source":"VertexShader.js","original":{"line":4,"column":0}},{"name":"VertexShader","generated":{"line":5,"column":23},"source":"VertexShader.js","original":{"line":4,"column":23}},{"generated":{"line":5,"column":35},"source":"VertexShader.js","original":{"line":4,"column":0}}],"sources":{"VertexShader.js":"\"use strict\";\r\nexports.__esModule = true;\r\nvar VertexShader = \"\\n\\n  uniform float uTime;,\\n  uniform float uScale;,\\n  uniform sampler2D tNoise;,\\n\\n  attribute vec3 positionStart;,\\n  attribute float startTime;,\\n  attribute vec3 velocity;,\\n  attribute float turbulence;,\\n  attribute vec3 color;,\\n  attribute float size;,\\n  attribute float lifeTime;,\\n\\n  varying vec4 vColor;,\\n  varying float lifeLeft;,\\n\\n  void main() {,\\n\\n  // unpack things from our attributes\\n\\n  \\tvColor = vec4( color, 1.0 );,\\n\\n  // convert our velocity back into a value we can use\\n\\n  \\tvec3 newPosition;,\\n  \\tvec3 v;,\\n\\n  \\tfloat timeElapsed = uTime - startTime;,\\n\\n  \\tlifeLeft = 1.0 - ( timeElapsed / lifeTime );,\\n\\n  \\tgl_PointSize = ( uScale * size ) * lifeLeft;,\\n\\n  \\tv.x = ( velocity.x - 0.5 ) * 3.0;,\\n  \\tv.y = ( velocity.y - 0.5 ) * 3.0;,\\n  \\tv.z = ( velocity.z - 0.5 ) * 3.0;,\\n\\n  \\tnewPosition = positionStart + ( v * 10.0 ) * timeElapsed;,\\n\\n  \\tvec3 noise = texture2D( tNoise, vec2( newPosition.x * 0.015 + ( uTime * 0.05 ), newPosition.y * 0.02 + ( uTime * 0.015 ) ) ).rgb;,\\n  \\tvec3 noiseVel = ( noise.rgb - 0.5 ) * 30.0;,\\n\\n  \\tnewPosition = mix( newPosition, newPosition + vec3( noiseVel * ( turbulence * 5.0 ) ), ( timeElapsed / lifeTime ) );,\\n\\n  \\tif( v.y > 0. && v.y < .05 ) {,\\n\\n  \\t\\tlifeLeft = 0.0;,\\n\\n  \\t},\\n\\n  \\tif( v.x < - 1.45 ) {,\\n\\n  \\t\\tlifeLeft = 0.0;,\\n\\n  \\t},\\n\\n  \\tif( timeElapsed > 0.0 ) {,\\n\\n  \\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );,\\n\\n  \\t} else {,\\n\\n  \\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );,\\n  \\t\\tlifeLeft = 0.0;,\\n  \\t\\tgl_PointSize = 0.;,\\n\\n  \\t},\\n\\n  }\\n\\n\";\r\nexports.VertexShader = VertexShader;\r\n"},"lineCount":null}},"hash":"7924dfefac69bf0361313cdecd41856d","cacheData":{"env":{}}}